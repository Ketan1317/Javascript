Capturing phase – the event goes down to the element.
Target phase – the event reached the target element.
Bubbling phase – the event bubbles up from the element.


1. Capturing Phase (Capture) =>>
What Happens:
The event starts at the root of the DOM (e.g., document) and travels down through the ancestor elements until it reaches the target element.
Use this phase if you want to handle the event before it reaches the target element.

Example:
element.addEventListener("click", handler, true); // The third argument `true` activates the capturing 


2. At Target =>>
What Happens:
The event reaches the target element, which is the element that triggered the event.


3. Bubbling Phase
What Happens:
After reaching the target, the event propagates back up through the ancestor elements in reverse order.

Example:
element.addEventListener("click", handler); // Default is bubbling

The bubbling principle is simple =>
When an event happens on an element, it first runs the handlers on it, then on its parent, then all the way up on other ancestors.


NOTE =>> What is event.target?
'event.target' is a property of the event object in JavaScript.
It refers to the HTML element that triggered the event.

For example, if you click on a <p> element, event.target will refer to that specific <p> element.

NOTE =>> Preventing browser actions:

The main way is to use the event object.
There’s a method "event.preventDefault()"

